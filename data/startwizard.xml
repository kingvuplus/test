<wizard>
		<step id="start">
			<condition>
try:
	from Plugins.SystemPlugins.AnimationSetup.plugin import AnimationSetupScreen
	has_animation = True
except ImportError:
	has_animation = False
self.condition = has_animation
			</condition>
			<text value="Do you want to setup animations?" />
			<list>
				<listentry caption="Yes" step="vti_zero" />
				<listentry caption="No" step="vti_zero" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
			<code pos="after">
import os.path
if self["list"].index == 0:
	from Plugins.SystemPlugins.AnimationSetup.plugin import AnimationSetupScreen
	self.session.open(AnimationSetupScreen)
			</code>
		</step>
		<step id="vti_zero">
			<text value="Do you want to use VTi ZerO to remove some packages which you do not need ?" />
			<list>
				<listentry caption="No" step="vti_backupsuite" />
				<listentry caption="Yes" step="vti_backupsuite" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
			<code pos="after">
if self["list"].index == 1:
	from Plugins.SystemPlugins.VTIPanel.VTiZerO import VTiZerO
	self.session.open(VTiZerO, "/usr/lib/enigma2/python/Plugins/SystemPlugins/VTIPanel", True)
			</code>
		</step>
		<step id="vti_backupsuite">
			<text value="Do you want to use VTi BackupSuite to restore your settings, plugins or favourite bouquets ?" />
			<list>
				<listentry caption="No" step="introduction" />
				<listentry caption="Yes" step="introduction" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
			<code pos="after">
import os.path
if self["list"].index == 1:
	from Plugins.SystemPlugins.VTIPanel.BackupSuite import BackupSuite
	self.session.open(BackupSuite, "/usr/lib/enigma2/python/Plugins/SystemPlugins/VTIPanel", "restore")
			</code>
		</step>
		<step id="introduction" >
			<text value="Use the up/down keys on your remote control to select an option. After that, press OK." />
			<list>
				<listentry caption="Use wizard to set up basic features" step="nima" />
				<listentry caption="Exit wizard" step="end" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="nima">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Use the left and right buttons to change an option.\n\nPlease set up tuner A" />
			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimb">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Please set up tuner B" />
			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimc">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Please set up tuner C" />
			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimd">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Please set up tuner D" />
			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="satlistsquestion">
			<text value="Do you want to install default sat lists?" />
			<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<code>
self.hideRc()
			</code>
			<list>
				<listentry caption="Yes" step="startdefaultlists" />
				<listentry caption="No" step="scanquestion" />
			</list>
		</step>

		<step id="scanquestion">
			<text value="Do you want to do a service scan?" />
			<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<code>
self.hideRc()
			</code>
			<list>
				<listentry caption="Yes, do an automatic scan now" step="scan" />
				<listentry caption="Yes, do a manual scan now" step="manualscan" />
				<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
			</list>
		</step>
		<step id="scan" nextstep="finisheddefaultsatlists">
			<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>			
			<text value="What do you want to scan?" />
			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="manualscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<text value="What do you want to scan?" />
			<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="nextscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<text value="Do you want to do another manual service scan?" />
			<list>
				<listentry caption="Yes, do another manual scan now" step="manualscan" />
				<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
			</list>
		</step>
		<step id="finisheddefaultsatlists">
			<text value="Do you want to enable the parental control feature on your STB?" />			

			<list>
				<listentry caption="No" step="end" />
				<listentry caption="Yes" step="parentalsetup" />
			</list>
			<code pos="after">
if self["list"].index == 0:
	config.ParentalControl.configured.value = False
else:
	config.ParentalControl.configured.value = True
config.ParentalControl.configured.save()
			</code>
		</step>
		<step id="parentalsetup">
			<text value="You need to set a PIN code and hide it from your children.\n\nDo you want to set the pin now?" />
			<list>
				<listentry caption="Yes" step="finishparentalsetup" />
				<listentry caption="No" step="warnpin" />
			</list>
			<code pos="after">
from ParentalControlSetup import ParentalControlChangePin
if self["list"].index == 0:
	self.session.open(ParentalControlChangePin, config.ParentalControl.servicepin[0], _("parental control pin"))
			</code>
		</step>
		<step id="warnpin">
			<text value="Please be aware, that anyone can disable the parental control, if you have not set a PIN." />
		</step>
		<step id="finishparentalsetup">
			<code>
if config.ParentalControl.setuppin.value == "aaaa":
	config.ParentalControl.setuppinactive.value = False
else:
	config.ParentalControl.setuppinactive.value = True
config.ParentalControl.setuppinactive.save()
config.ParentalControl.servicepinactive.value = True
config.ParentalControl.servicepinactive.save()
config.ParentalControl.setuppin.value = config.ParentalControl.servicepin[0].value
config.ParentalControl.setuppin.save()
			</code>

			<text value="After the start wizard is completed, you need to protect single services. Refer to your STB's manual on how to do that." />

		</step>
		<step id="end" laststep="true">
			<condition>
self.condition = self.isLastWizard
			</condition>
			<text value="Thank you for using the wizard. Your box is now ready to use.\nPlease press OK to start using your STB." />

		</step>
</wizard>
